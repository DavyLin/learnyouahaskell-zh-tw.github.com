<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">

        <style>
            @import url(css/style.css);
        </style>

        <script src="js/jquery.js"></script>
        <script src="js/jquery.chili-2.2.js"></script>
        <script src="js/script.js"></script>
        <script>
             ChiliBook.recipeFolder = "js/chili/";  
             ChiliBook.automaticSelector = "pre";
        </script>

        <title>輸入與輸出</title>
    </head>

    <body>
        <div id="header">
            <img id="beta" alt="beta" src="img/beta.png" />
        </div>

        <div id="main">
            <ul class="nav">
            <li class="left">  <img src="img/prv.png"></img><a href="make-types-and-classes-for-ourselves-.htm">構造我們自己的類型和類型類</a></li>
            <li class="center"><a href="chapters.htm">Index</a></li>
            <li class="right"> <a href="functionally-solving-problems.htm">函數式地思考來解決問題</a><img src="img/nxt.png"></img></li>
            </ul>

            <a name="輸入與輸出"></a><h1>輸入與輸出</h1><p>我們已經說明了Haskell是一個純粹函數式語言。</p><p>雖說在命令式語言中我們習慣給電腦執行一連串指令，</p><p>在函數式語言中我們是用定義東西的方式進行。</p><p>在Haskell中，一個函數不能改變狀態，</p><p>像是改變一個變數的內容。</p><p>(當一個函數會改變狀態，我們說這函數是有副作用的。)</p><p>在Haskell中函數唯一可以做的事是根據我們給定的參數來算出的結果。</p><p>如果我們用同樣的參數呼叫兩次同一個函數，</p><p>它會回傳相同的結果。</p><p>儘管這從命令列語言的角度來看是蠻大的限制，我們已經看過它可以達成多麼酷的效果。</p><p>在一個命令式語言中，</p><p>程式語言沒辦法給你任何保證在一個簡單如印出幾個數字的函數不會同時燒掉你的房子，</p><p>綁架你的狗並刮傷你車子的烤漆。</p><p>例如，</p><p>當我們要做一個二元樹的時候，</p><p>我們並不插入一個結點來改變原有的樹。</p><p>由於我們無法改變狀態，我們的函數實際上回傳了一棵新的二元樹。</p><p>函數無法改變狀態的好處是它讓我們促進了我們理解程式的容易度，</p><p>但同時也造成了一個問題。</p><p>假如說一個函數無法改變現實世界的狀態，</p><p>那它要如何印出它所計算的結果?</p><p>畢竟要告訴我們結果的話，</p><p>它必須要改變輸出裝置的狀態(譬如說螢幕)，</p><p>然後從螢幕傳達到我們的腦，並改變我們心智的狀態。</p><p>不要太早下結論，</p><p>Haskell實際上設計了一個非常聰明的系統來處理有副作用的函數，</p><p>它漂亮地將我們的程式區分成純粹跟非純粹兩部分。</p><p>非純粹的部分負責跟鍵盤還有螢幕溝通。</p><p>有了這區分的機制，</p><p>在跟外界溝通的同時，</p><p>我們還是能夠有效運用純粹所帶來的好處，像是惰性求值、容錯性跟模組性</p><a name="Hello, world!"></a><h2>Hello, world!</h2><p>到目前為止我們都是將函數載入GHCi中來測試，像是標準函式庫中的一些函式。</p><p>但現在我們要做些不一樣的，寫一個真實跟世界互動的Haskell程式。</p><p>當然不例外，我們會來寫個"hello world"。</p><p>現在，我們把下一行打到你熟悉的編輯器中</p><pre class="code">main = putStrLn "hello, world"</pre><p>我們定義了一個<code>main</code>，並在裡面以<code>"hello, world"</code>為參數呼叫了<code>putStrLn</code>。</p><p>看起來沒什麼大不了，但不久你就會發現它的奧妙。</p><p>把這程式存成<code>helloworld.hs</code>。</p><p>現在我們將做一件之前沒做過的事: 編譯你的程式。</p><p>打開你的終端並切換到包含<code>helloworld.hs</code>的目錄，並輸入下列指令。</p><pre class="code">$ ghc --make helloworld
[1 of 1] Compiling Main                 ( helloworld.hs, hellowowlrd.o )
Linking helloworld ...</pre><p>順利的話你就會得到如上的訊息，接著你便可以執行你的程式<code>./helloworld</code></p><pre class="code">$ ./helloworld
hello, world</pre><p>這就是我們第一個編譯成功並印出字串到螢幕的程式。很簡單吧。</p><p>讓我們來看一下我們究竟做了些什麼，</p><p>首先來看一下<code>putStrLn</code>函數的型態</p><pre class="code">ghci> :t putStrLn
putStrLn :: String -> IO ()
ghci> :t putStrLn "hello, world"
putStrLn "hello, world" :: IO ()</pre><p>我們可以這麼解讀<code>putStrLn</code>的型態:</p><p><code>putStrLn</code>接受一個字串並回傳一個I/O action，這I/O action包含了<code>()</code>的型態。</p><p>(即空的tuple，或者是unit型態)。</p><p>一個I/O action是一個會造成副作用的動作，常是指讀取輸入或輸出到螢幕，</p><p>同時也代表會回傳某些值。</p><p>在螢幕印出幾個字串並沒有什麼有意義的回傳值可言，</p><p>所以這邊用一個<code>()</code>來代表。</p><p>那究竟I/O action會在什麼時候被觸發呢?</p><p>這就是<code>main</code>的公用所在。</p><p>一個I/O action會在我們把它綁定到<code>main</code>這個名字並且執行程式的時候觸發。</p><p>把整個程式限制在只能有一個I/O action看似是個極大的限制。</p><p>這就是為什麼我們需要do表示法來將所有I/O action綁成一個。</p><p>來看看下面這個例子。</p><pre class="code">main = do
    putStrLn "Hello, what's your name?"
    name <- getLine
    putStrLn ("Hey " ++ name ++ ", you rock!")</pre><p>新的語法，有趣吧! 它看起來就像一個命令式的程式。</p><p>如果你編譯並執行它，它便會照你預期的方式執行。</p><p>我們寫了一個do並且接著一連串指令，就像寫個命令式程式一般，每一步都是一個I/O action。</p><p>將所有I/O action用do綁在一起變成了一個大的I/O action。</p><p>這個大的I/O action的型態是<code>IO ()</code>，</p><p>這完全是由最後一個I/O action所決定的。</p><a name="檔案與字符流"></a><h2>檔案與字符流</h2><a name="命令列引數"></a><h2>命令列引數</h2><a name="亂數"></a><h2>亂數</h2><a name="Bytestrings"></a><h2>Bytestrings</h2><a name="例外"></a><h2>例外</h2>

            <ul class="nav">
            <li class="left">  <img src="img/prv.png"></img><a href="make-types-and-classes-for-ourselves-.htm">構造我們自己的類型和類型類</a></li>
            <li class="center"><a href="chapters.htm">Index</a></li>
            <li class="right"> <a href="functionally-solving-problems.htm">函數式地思考來解決問題</a><img src="img/nxt.png"></img></li>
            </ul>
        </div>

        <div id="footer">
        </div>

    </body>
</html>

